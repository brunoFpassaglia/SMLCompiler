/* SMLCompiler.java */
/* Generated By:JavaCC: Do not edit this line. SMLCompiler.java */
package parser;
import java.io.*;
import tree.*;

public class SMLCompiler implements SMLCompilerConstants {
    final static String Version = "SMLCompiler 1.0 - Bruno Passaglia - 2017";
    boolean Menosshort = false;
    int countParseError = 0;
    boolean debug_recovery = true;

    public static void main(String args[]) throws ParseException {
        String filename = "D:/Faculdade/TCC/SMLCompiler/entradas/SyntaticErrors1.sml";
        SMLCompiler parser;
        int i;
        boolean ms = false;
        System.out.println(Version);
        boolean debug_as = false;
        boolean print_tree = false;


        try{
            parser = new SMLCompiler(new java.io.FileInputStream(filename));
        }
        catch(java.io.FileNotFoundException e){
            System.out.println("arquivo n\u00c3\u00a3o encontrado");
            return;
        }
        parser.disable_tracing();
        parser.Menosshort = ms;

        ListNode root = null;
        try{
            /*root = */parser.smlprogram();
        }
        catch(ParseException e){
            System.err.println(e.getMessage());
            parser.countParseError = 1;
        }
        finally{
            System.out.println(parser.token_source.foundLexErrors() + " Lexical Errors found");
            System.out.println(parser.countParseError + " Syntactic Errors found");
        }
        if(parser.token_source.foundLexErrors() + parser.countParseError==0){
            PrintTree prt = new PrintTree();
            prt.printRoot(root);
        }
    }

    static public String im(int x){
        int k;
        String s;
        s = tokenImage[x];
        k = s.lastIndexOf("\u005c"");
        try{
            s = s.substring(1, k);
        }catch(StringIndexOutOfBoundsException e){

        }
        return s;
    }
    boolean eof;

  final public ListNode smlprogram() throws ParseException {
    trace_call("smlprogram");
    try {ListNode l = null;
    VisionClauseNode v = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PREFIX:
      case CREATE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PREFIX:{
          l = prefixlist();
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        v = visionclause();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WITH:{
          withclause();
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(0);
{if ("" != null) return new ListNode(v, l);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("smlprogram");
    }
  }

  final public ListNode prefixlist() throws ParseException {
    trace_call("prefixlist");
    try {PrefixDeclNode p = null;
    ListNode l = null;
      p = prefixdecl();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PREFIX:{
        l = prefixlist();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
{if ("" != null) return new ListNode(p, l);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("prefixlist");
    }
  }

  final public PrefixDeclNode prefixdecl() throws ParseException {
    trace_call("prefixdecl");
    try {Token t1 = null, t2 = null;
      t1 = jj_consume_token(PREFIX);
      t2 = jj_consume_token(IDENT);
      jj_consume_token(COLON);
      jj_consume_token(ENDERECO);
{if ("" != null) return new PrefixDeclNode(t1, t2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("prefixdecl");
    }
  }

  final public VisionClauseNode visionclause() throws ParseException {
    trace_call("visionclause");
    try {Token t2 = null;
    VisionBodyNode vb = null;
      jj_consume_token(CREATE);
      jj_consume_token(VIEW);
      t2 = jj_consume_token(IDENT);
      jj_consume_token(AS);
      jj_consume_token(CONSTRUCT);
      vb = visionbody();
{if ("" != null) return new VisionClauseNode(t2, vb);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("visionclause");
    }
  }

  final public VisionBodyNode visionbody() throws ParseException {
    trace_call("visionbody");
    try {ListNode l = null;
    Token t = null;
      t = jj_consume_token(OPENBRACE);
      l = variablelist();
      jj_consume_token(CLOSEBRACE);
{if ("" != null) return new VisionBodyNode(t, l);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("visionbody");
    }
  }

  final public ListNode variablelist() throws ParseException {
    trace_call("variablelist");
    try {VariableDeclNode vd = null;
    ListNode vl = null;
      vd = variabledecl();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VARIAVEL:{
        vl = variablelist();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
{if ("" != null) return new ListNode(vd, vl);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("variablelist");
    }
  }

  final public VariableDeclNode variabledecl() throws ParseException {
    trace_call("variabledecl");
    try {Token t1 = null;
    ListNode stl = null;
      t1 = jj_consume_token(VARIAVEL);
      stl = statementlist();
      jj_consume_token(DOT);
{if ("" != null) return new VariableDeclNode(t1, stl);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("variabledecl");
    }
  }

  final public ListNode statementlist() throws ParseException {
    trace_call("statementlist");
    try {StatementNode sn = null;
    ListNode sl = null;
      sn = statement();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        jj_consume_token(SEMICOLON);
        sl = statementlist();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
{if ("" != null) return new ListNode(sn, sl);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("statementlist");
    }
  }

  final public StatementNode statement() throws ParseException {
    trace_call("statement");
    try {Token t1 = null;
    Token t2 = null;
      t1 = jj_consume_token(IDENT);
      jj_consume_token(COLON);
      jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENT:{
        t2 = jj_consume_token(IDENT);
        jj_consume_token(COLON);
        jj_consume_token(IDENT);
        break;
        }
      case VARIAVEL:{
        jj_consume_token(VARIAVEL);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new StatementNode(t1, t2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("statement");
    }
  }

  final public void withclause() throws ParseException {
    trace_call("withclause");
    try {
      jj_consume_token(WITH);
      variabledefinitionlist();
    } finally {
      trace_return("withclause");
    }
  }

  final public void variabledefinitionlist() throws ParseException {
    trace_call("variabledefinitionlist");
    try {
      variabledefinition();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VARIAVEL:{
        variabledefinitionlist();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } finally {
      trace_return("variabledefinitionlist");
    }
  }

  final public void variabledefinition() throws ParseException {
    trace_call("variabledefinition");
    try {
      jj_consume_token(VARIAVEL);
      jj_consume_token(ASSIGN);
      termoctorexp();
    } finally {
      trace_return("variabledefinition");
    }
  }

  final public void termoctorexp() throws ParseException {
    trace_call("termoctorexp");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BNODE:
      case URI:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BNODE:{
          jj_consume_token(BNODE);
          break;
          }
        case URI:{
          jj_consume_token(URI);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(OPENPAREN);
        expression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          expressionlist();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(CLOSEPAREN);
        break;
        }
      case PLAINLITERAL:
      case TYPEDLITERAL:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLAINLITERAL:{
          jj_consume_token(PLAINLITERAL);
          break;
          }
        case TYPEDLITERAL:{
          jj_consume_token(TYPEDLITERAL);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(OPENPAREN);
        expression();
        jj_consume_token(CLOSEPAREN);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("termoctorexp");
    }
  }

  final public void expressionlist() throws ParseException {
    trace_call("expressionlist");
    try {
      expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        expressionlist();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } finally {
      trace_return("expressionlist");
    }
  }

  final public void expression() throws ParseException {
    trace_call("expression");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VARIAVEL:{
        jj_consume_token(VARIAVEL);
        break;
        }
      case STR:{
        jj_consume_token(STR);
        jj_consume_token(OPENPAREN);
        expression();
        jj_consume_token(CLOSEPAREN);
        break;
        }
      case CONCAT:{
        jj_consume_token(CONCAT);
        jj_consume_token(OPENPAREN);
        expression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          expressionlist();
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(CLOSEPAREN);
        break;
        }
      case URLENCODE:{
        jj_consume_token(URLENCODE);
        jj_consume_token(OPENPAREN);
        expression();
        jj_consume_token(CLOSEPAREN);
        break;
        }
      case IDENT:
      case ENDERECO:{
        iriqname();
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("expression");
    }
  }

  final public void iriqname() throws ParseException {
    trace_call("iriqname");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENDERECO:{
        jj_consume_token(ENDERECO);
        break;
        }
      case IDENT:{
        jj_consume_token(IDENT);
        jj_consume_token(COLON);
        expression();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("iriqname");
    }
  }

  void program() throws ParseException {
    trace_call("program");
    try {Token t;
    do
    {
    t = getNextToken();
    Token st = t;
        while ( st.specialToken != null)
        st = st.specialToken;
        do {
           if ( Menosshort )
          System.out.println(st.image + "  " +
                                 im(st.kind) + " " +
                                 st.kind);
           else
              System.out.println("Linha: " + st.beginLine +
                                 " Coluna: " + st.beginColumn +
                                 " " + st.image +
                                 "  " + im(st.kind) + "  "+t.kind);
          st = st.next;
        } while (st != t.next);
    } while (t.kind != SMLCompilerConstants.EOF);
    } finally {
      trace_return("program");
    }
  }

  /** Generated Token Manager. */
  public SMLCompilerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x800,0xc0,0x40,0x0,0x1000000,0x40000000,0x0,0xc000,0x4000000,0x30000,0x3c000,0x4000000,0x4000000,0x60043000,0x40000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x4,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x8,};
   }

  /** Constructor with InputStream. */
  public SMLCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SMLCompiler(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SMLCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SMLCompiler(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SMLCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SMLCompiler(SMLCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SMLCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
